// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"mandacode.com/accounts/user/ent/predicate"
	"mandacode.com/accounts/user/ent/sentemail"
	"mandacode.com/accounts/user/ent/user"
)

// SentEmailUpdate is the builder for updating SentEmail entities.
type SentEmailUpdate struct {
	config
	hooks    []Hook
	mutation *SentEmailMutation
}

// Where appends a list predicates to the SentEmailUpdate builder.
func (seu *SentEmailUpdate) Where(ps ...predicate.SentEmail) *SentEmailUpdate {
	seu.mutation.Where(ps...)
	return seu
}

// SetUserID sets the "user_id" field.
func (seu *SentEmailUpdate) SetUserID(u uuid.UUID) *SentEmailUpdate {
	seu.mutation.SetUserID(u)
	return seu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (seu *SentEmailUpdate) SetNillableUserID(u *uuid.UUID) *SentEmailUpdate {
	if u != nil {
		seu.SetUserID(*u)
	}
	return seu
}

// SetEmail sets the "email" field.
func (seu *SentEmailUpdate) SetEmail(s string) *SentEmailUpdate {
	seu.mutation.SetEmail(s)
	return seu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (seu *SentEmailUpdate) SetNillableEmail(s *string) *SentEmailUpdate {
	if s != nil {
		seu.SetEmail(*s)
	}
	return seu
}

// SetUser sets the "user" edge to the User entity.
func (seu *SentEmailUpdate) SetUser(u *User) *SentEmailUpdate {
	return seu.SetUserID(u.ID)
}

// Mutation returns the SentEmailMutation object of the builder.
func (seu *SentEmailUpdate) Mutation() *SentEmailMutation {
	return seu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (seu *SentEmailUpdate) ClearUser() *SentEmailUpdate {
	seu.mutation.ClearUser()
	return seu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (seu *SentEmailUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, seu.sqlSave, seu.mutation, seu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (seu *SentEmailUpdate) SaveX(ctx context.Context) int {
	affected, err := seu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (seu *SentEmailUpdate) Exec(ctx context.Context) error {
	_, err := seu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (seu *SentEmailUpdate) ExecX(ctx context.Context) {
	if err := seu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (seu *SentEmailUpdate) check() error {
	if v, ok := seu.mutation.Email(); ok {
		if err := sentemail.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "SentEmail.email": %w`, err)}
		}
	}
	if seu.mutation.UserCleared() && len(seu.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SentEmail.user"`)
	}
	return nil
}

func (seu *SentEmailUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := seu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(sentemail.Table, sentemail.Columns, sqlgraph.NewFieldSpec(sentemail.FieldID, field.TypeUUID))
	if ps := seu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := seu.mutation.Email(); ok {
		_spec.SetField(sentemail.FieldEmail, field.TypeString, value)
	}
	if seu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sentemail.UserTable,
			Columns: []string{sentemail.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := seu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sentemail.UserTable,
			Columns: []string{sentemail.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, seu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sentemail.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	seu.mutation.done = true
	return n, nil
}

// SentEmailUpdateOne is the builder for updating a single SentEmail entity.
type SentEmailUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SentEmailMutation
}

// SetUserID sets the "user_id" field.
func (seuo *SentEmailUpdateOne) SetUserID(u uuid.UUID) *SentEmailUpdateOne {
	seuo.mutation.SetUserID(u)
	return seuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (seuo *SentEmailUpdateOne) SetNillableUserID(u *uuid.UUID) *SentEmailUpdateOne {
	if u != nil {
		seuo.SetUserID(*u)
	}
	return seuo
}

// SetEmail sets the "email" field.
func (seuo *SentEmailUpdateOne) SetEmail(s string) *SentEmailUpdateOne {
	seuo.mutation.SetEmail(s)
	return seuo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (seuo *SentEmailUpdateOne) SetNillableEmail(s *string) *SentEmailUpdateOne {
	if s != nil {
		seuo.SetEmail(*s)
	}
	return seuo
}

// SetUser sets the "user" edge to the User entity.
func (seuo *SentEmailUpdateOne) SetUser(u *User) *SentEmailUpdateOne {
	return seuo.SetUserID(u.ID)
}

// Mutation returns the SentEmailMutation object of the builder.
func (seuo *SentEmailUpdateOne) Mutation() *SentEmailMutation {
	return seuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (seuo *SentEmailUpdateOne) ClearUser() *SentEmailUpdateOne {
	seuo.mutation.ClearUser()
	return seuo
}

// Where appends a list predicates to the SentEmailUpdate builder.
func (seuo *SentEmailUpdateOne) Where(ps ...predicate.SentEmail) *SentEmailUpdateOne {
	seuo.mutation.Where(ps...)
	return seuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (seuo *SentEmailUpdateOne) Select(field string, fields ...string) *SentEmailUpdateOne {
	seuo.fields = append([]string{field}, fields...)
	return seuo
}

// Save executes the query and returns the updated SentEmail entity.
func (seuo *SentEmailUpdateOne) Save(ctx context.Context) (*SentEmail, error) {
	return withHooks(ctx, seuo.sqlSave, seuo.mutation, seuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (seuo *SentEmailUpdateOne) SaveX(ctx context.Context) *SentEmail {
	node, err := seuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (seuo *SentEmailUpdateOne) Exec(ctx context.Context) error {
	_, err := seuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (seuo *SentEmailUpdateOne) ExecX(ctx context.Context) {
	if err := seuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (seuo *SentEmailUpdateOne) check() error {
	if v, ok := seuo.mutation.Email(); ok {
		if err := sentemail.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "SentEmail.email": %w`, err)}
		}
	}
	if seuo.mutation.UserCleared() && len(seuo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SentEmail.user"`)
	}
	return nil
}

func (seuo *SentEmailUpdateOne) sqlSave(ctx context.Context) (_node *SentEmail, err error) {
	if err := seuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(sentemail.Table, sentemail.Columns, sqlgraph.NewFieldSpec(sentemail.FieldID, field.TypeUUID))
	id, ok := seuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SentEmail.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := seuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sentemail.FieldID)
		for _, f := range fields {
			if !sentemail.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != sentemail.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := seuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := seuo.mutation.Email(); ok {
		_spec.SetField(sentemail.FieldEmail, field.TypeString, value)
	}
	if seuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sentemail.UserTable,
			Columns: []string{sentemail.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := seuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sentemail.UserTable,
			Columns: []string{sentemail.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SentEmail{config: seuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, seuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sentemail.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	seuo.mutation.done = true
	return _node, nil
}
