// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"mandacode.com/accounts/user/ent/sentemail"
	"mandacode.com/accounts/user/ent/user"
)

// SentEmail is the model entity for the SentEmail schema.
type SentEmail struct {
	config `json:"-"`
	// ID of the ent.
	// Unique identifier for the mail sent record. This is a UUID that is generated when the record is created.
	ID uuid.UUID `json:"id,omitempty"`
	// Unique identifier for the user associated with the mail sent record. This is a UUID that is generated when the user is created.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// Email address to which the mail was sent. This is a required field and must not be empty.
	Email string `json:"email,omitempty"`
	// Timestamp when the mail was sent. This is set to the current time when the record is created.
	SentAt time.Time `json:"sent_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SentEmailQuery when eager-loading is set.
	Edges        SentEmailEdges `json:"edges"`
	selectValues sql.SelectValues
}

// SentEmailEdges holds the relations/edges for other nodes in the graph.
type SentEmailEdges struct {
	// Edge to the User entity. This establishes a relationship between the SentEmail and User entities, linking the sent email to the user who sent it.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SentEmailEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SentEmail) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case sentemail.FieldEmail:
			values[i] = new(sql.NullString)
		case sentemail.FieldSentAt:
			values[i] = new(sql.NullTime)
		case sentemail.FieldID, sentemail.FieldUserID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SentEmail fields.
func (se *SentEmail) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case sentemail.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				se.ID = *value
			}
		case sentemail.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				se.UserID = *value
			}
		case sentemail.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				se.Email = value.String
			}
		case sentemail.FieldSentAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field sent_at", values[i])
			} else if value.Valid {
				se.SentAt = value.Time
			}
		default:
			se.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SentEmail.
// This includes values selected through modifiers, order, etc.
func (se *SentEmail) Value(name string) (ent.Value, error) {
	return se.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the SentEmail entity.
func (se *SentEmail) QueryUser() *UserQuery {
	return NewSentEmailClient(se.config).QueryUser(se)
}

// Update returns a builder for updating this SentEmail.
// Note that you need to call SentEmail.Unwrap() before calling this method if this SentEmail
// was returned from a transaction, and the transaction was committed or rolled back.
func (se *SentEmail) Update() *SentEmailUpdateOne {
	return NewSentEmailClient(se.config).UpdateOne(se)
}

// Unwrap unwraps the SentEmail entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (se *SentEmail) Unwrap() *SentEmail {
	_tx, ok := se.config.driver.(*txDriver)
	if !ok {
		panic("ent: SentEmail is not a transactional entity")
	}
	se.config.driver = _tx.drv
	return se
}

// String implements the fmt.Stringer.
func (se *SentEmail) String() string {
	var builder strings.Builder
	builder.WriteString("SentEmail(")
	builder.WriteString(fmt.Sprintf("id=%v, ", se.ID))
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", se.UserID))
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(se.Email)
	builder.WriteString(", ")
	builder.WriteString("sent_at=")
	builder.WriteString(se.SentAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// SentEmails is a parsable slice of SentEmail.
type SentEmails []*SentEmail
